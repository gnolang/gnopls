// This file was generated by genbuiltin, DO NOT EDIT!
// See: /tools/genbuiltin

package builtin

import protocol "go.lsp.dev/protocol"

// Buckets contains list of completions for builtin Gno functions grouped by a first letter.
var Buckets = map[rune][]protocol.CompletionItem{
	int32(100): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "func delete(m map[Type]Type1, key Type)",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The delete built-in function deletes the element with the specified key\n(m[key]) from the map. If m is nil or there is no such element, delete\nis a no-op.",
		},
		InsertText:       "delete(m, key)",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindFunction,
		Label:            "delete",
	}},
	int32(101): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "The error built-in interface type is the conventional interface for\nrepresenting an error condition, with the nil value representing no error.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The error built-in interface type is the conventional interface for\nrepresenting an error condition, with the nil value representing no error.",
		},
		InsertText:       "error",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "error",
	}},
	int32(102): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "float32 is the set of all IEEE-754 32-bit floating-point numbers.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "float32 is the set of all IEEE-754 32-bit floating-point numbers.",
		},
		InsertText:       "float32",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "float32",
	}, protocol.CompletionItem{
		Detail: "float64 is the set of all IEEE-754 64-bit floating-point numbers.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "float64 is the set of all IEEE-754 64-bit floating-point numbers.",
		},
		InsertText:       "float64",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "float64",
	}},
	int32(105): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "int is a signed integer type that is at least 32 bits in size. It is a\ndistinct type, however, and not an alias for, say, int32.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "int is a signed integer type that is at least 32 bits in size. It is a\ndistinct type, however, and not an alias for, say, int32.",
		},
		InsertText:       "int",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "int",
	}, protocol.CompletionItem{
		Detail: "int16 is the set of all signed 16-bit integers.\nRange: -32768 through 32767.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "int16 is the set of all signed 16-bit integers.\nRange: -32768 through 32767.",
		},
		InsertText:       "int16",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "int16",
	}, protocol.CompletionItem{
		Detail: "int32 is the set of all signed 32-bit integers.\nRange: -2147483648 through 2147483647.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "int32 is the set of all signed 32-bit integers.\nRange: -2147483648 through 2147483647.",
		},
		InsertText:       "int32",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "int32",
	}, protocol.CompletionItem{
		Detail: "int64 is the set of all signed 64-bit integers.\nRange: -9223372036854775808 through 9223372036854775807.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "int64 is the set of all signed 64-bit integers.\nRange: -9223372036854775808 through 9223372036854775807.",
		},
		InsertText:       "int64",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "int64",
	}, protocol.CompletionItem{
		Detail: "int8 is the set of all signed 8-bit integers.\nRange: -128 through 127.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "int8 is the set of all signed 8-bit integers.\nRange: -128 through 127.",
		},
		InsertText:       "int8",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "int8",
	}},
	int32(112): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "func panic(v interface{})",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The panic built-in function stops normal execution of the current\ngoroutine. When a function F calls panic, normal execution of F stops\nimmediately. Any functions whose execution was deferred by F are run in\nthe usual way, and then F returns to its caller. To the caller G, the\ninvocation of F then behaves like a call to panic, terminating G's\nexecution and running any deferred functions. This continues until all\nfunctions in the executing goroutine have stopped, in reverse order. At\nthat point, the program is terminated with a non-zero exit code. This\ntermination sequence is called panicking and can be controlled by the\nbuilt-in function recover.",
		},
		InsertText:       "panic(v)",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindFunction,
		Label:            "panic",
	}, protocol.CompletionItem{
		Detail: "func print(args ...Type)",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The print built-in function formats its arguments in an\nimplementation-specific way and writes the result to standard error.\nPrint is useful for bootstrapping and debugging; it is not guaranteed\nto stay in the language.",
		},
		InsertText:       "print(args)",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindFunction,
		Label:            "print",
	}, protocol.CompletionItem{
		Detail: "func println(args ...Type)",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The println built-in function formats its arguments in an\nimplementation-specific way and writes the result to standard error.\nSpaces are always added between arguments and a newline is appended.\nPrintln is useful for bootstrapping and debugging; it is not guaranteed\nto stay in the language.",
		},
		InsertText:       "println(args)",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindFunction,
		Label:            "println",
	}},
	int32(114): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "func recover() interface{}",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "The recover built-in function allows a program to manage behavior of a\npanicking goroutine. Executing a call to recover inside a deferred\nfunction (but not any function called by it) stops the panicking sequence\nby restoring normal execution and retrieves the error value passed to the\ncall of panic. If recover is called outside the deferred function it will\nnot stop a panicking sequence. In this case, or when the goroutine is not\npanicking, recover returns nil.",
		},
		InsertText:       "recover()",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindFunction,
		Label:            "recover",
	}, protocol.CompletionItem{
		Detail: "rune is an alias for int32 and is equivalent to int32 in all ways. It is\nused, by convention, to distinguish character values from integer values.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "rune is an alias for int32 and is equivalent to int32 in all ways. It is\nused, by convention, to distinguish character values from integer values.",
		},
		InsertText:       "rune",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "rune",
	}},
	int32(115): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "string is the set of all strings of 8-bit bytes, conventionally but not\nnecessarily representing UTF-8-encoded text. A string may be empty, but\nnot nil. Values of string type are immutable.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "string is the set of all strings of 8-bit bytes, conventionally but not\nnecessarily representing UTF-8-encoded text. A string may be empty, but\nnot nil. Values of string type are immutable.",
		},
		InsertText:       "string",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "string",
	}},
	int32(117): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "uint is an unsigned integer type that is at least 32 bits in size. It is a\ndistinct type, however, and not an alias for, say, uint32.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uint is an unsigned integer type that is at least 32 bits in size. It is a\ndistinct type, however, and not an alias for, say, uint32.",
		},
		InsertText:       "uint",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uint",
	}, protocol.CompletionItem{
		Detail: "uint16 is the set of all unsigned 16-bit integers.\nRange: 0 through 65535.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uint16 is the set of all unsigned 16-bit integers.\nRange: 0 through 65535.",
		},
		InsertText:       "uint16",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uint16",
	}, protocol.CompletionItem{
		Detail: "uint32 is the set of all unsigned 32-bit integers.\nRange: 0 through 4294967295.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uint32 is the set of all unsigned 32-bit integers.\nRange: 0 through 4294967295.",
		},
		InsertText:       "uint32",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uint32",
	}, protocol.CompletionItem{
		Detail: "uint64 is the set of all unsigned 64-bit integers.\nRange: 0 through 18446744073709551615.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uint64 is the set of all unsigned 64-bit integers.\nRange: 0 through 18446744073709551615.",
		},
		InsertText:       "uint64",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uint64",
	}, protocol.CompletionItem{
		Detail: "uint8 is the set of all unsigned 8-bit integers.\nRange: 0 through 255.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uint8 is the set of all unsigned 8-bit integers.\nRange: 0 through 255.",
		},
		InsertText:       "uint8",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uint8",
	}, protocol.CompletionItem{
		Detail: "uintptr is an integer type that is large enough to hold the bit pattern of\nany pointer.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "uintptr is an integer type that is large enough to hold the bit pattern of\nany pointer.",
		},
		InsertText:       "uintptr",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "uintptr",
	}},
	int32(98): []protocol.CompletionItem{protocol.CompletionItem{
		Detail: "bool is the set of boolean values, true and false.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "bool is the set of boolean values, true and false.",
		},
		InsertText:       "bool",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "bool",
	}, protocol.CompletionItem{
		Detail: "byte is an alias for uint8 and is equivalent to uint8 in all ways. It is\nused, by convention, to distinguish byte values from 8-bit unsigned\ninteger values.",
		Documentation: protocol.MarkupContent{
			Kind:  protocol.Markdown,
			Value: "byte is an alias for uint8 and is equivalent to uint8 in all ways. It is\nused, by convention, to distinguish byte values from 8-bit unsigned\ninteger values.",
		},
		InsertText:       "byte",
		InsertTextFormat: protocol.InsertTextFormatPlainText,
		Kind:             protocol.CompletionItemKindClass,
		Label:            "byte",
	}},
}
